// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  username        String?   @unique
  email           String    @unique
  name            String?
  password        String
  userImage       String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  gigsCreated     Gigs[]    @relation(name: "Author")
  gigsAccepted    GigUser[] //to know which of the Request is Accepted or not
  authType        AuthType?
  languages       String[]
  reviewsGiven    Reviews[] @relation(name: "GiventoUser")
  reviewsReceived Reviews[] @relation(name: "GivenbyUser")
  role            UserRole  @default(USER)
  confirmedGigs   Gigs[]    @relation(name: "ConfirmedUser") //User will get to know which his requests are accpeted
  bio             String?
  education       String?
}

model Gigs {
  id            String    @id @default(uuid())
  title         String
  content       String
  startDateTime DateTime
  endDateTime   DateTime
  createdAt     DateTime  @default(now()) // When the Post is Created
  updatedAt     DateTime  @updatedAt
  timeneeded    Int       
  authorId      String
  confirmUserId String?
  confirmedUser User?     @relation(name: "ConfirmedUser", fields: [confirmUserId], references: [id])
  status        GigStatus
  author        User      @relation(name: "Author", fields: [authorId], references: [id])
  acceptedUsers GigUser[]
  Interval      Json //This will store the interval of the Gig

}

model Reviews {
  id              String   @id @default(uuid())
  content         String
  rating          Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  givento         String
  givenby         String
  giventoUser     User     @relation(name: "GiventoUser", fields: [givento], references: [id])
  givenbyUser     User     @relation(name: "GivenbyUser", fields: [givenby], references: [id])
}
model GigUser {
  id       String  @id @default(uuid())
  gig      Gigs    @relation(fields: [gigId], references: [id])
  gigId    String
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  accepted Boolean //Teacher will also get to know which of the Requests are accepted
  @@unique([gigId, userId])
}
enum AuthType {
  GOOGLE
  FACEBOOK
  GITHUB
  PENDING //if the User is not verified 
}

enum GigStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum UserRole {
  USER
  SKIZZER
}
