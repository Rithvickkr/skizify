generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  username        String?   @unique
  email           String    @unique
  name            String?
  password        String
  userImage       String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  gigsCreated     Gigs[]    @relation(name: "Author")
  gigUsertable    GigUser[] @relation(name: "UserCreatedGig")
  gigSkizzerTable GigUser[] @relation(name: "UserAccptedGig")
  authType        AuthType?
  languages       String[]
  reviewsGiven    Reviews[] @relation(name: "GivenbyUser")
  reviewsReceived Reviews[] @relation(name: "GiventoUser")
  role            UserRole  @default(USER)
  confirmedGigs   Gigs[]    @relation(name: "ConfirmedUser")
  bio             String?
  education       String?
  skills          String[]
  achievements    String[]
  qualification   String?
  profession      String?
}

model Gigs {
  id              String    @id @default(uuid())
  title           String
  content         String
  startDateTime   DateTime
  endDateTime     DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  timeneeded      Int
  authorId        String
  confirmUserId   String?
  Budgetfinalised Int?
  finalDateTime   DateTime?
  confirmedUser   User?     @relation(name: "ConfirmedUser", fields: [confirmUserId], references: [id])
  status          GigStatus @default(PENDING)
  author          User      @relation(name: "Author", fields: [authorId], references: [id])
  acceptedUsers   GigUser[] ///WHAT THIS MEANS IS THAT IT CONTAINS ALL THE ELEMENTS WHICH HAS GIGid equal to the original id
  Interval        Json
  category        String
}

model Reviews {
  id          String   @id @default(uuid())
  content     String
  rating      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  givento     String
  givenby     String
  giventoUser User     @relation(name: "GiventoUser", fields: [givento], references: [id])
  givenbyUser User     @relation(name: "GivenbyUser", fields: [givenby], references: [id])
}

model GigUser {
  id            String    @id @default(uuid())
  gig           Gigs      @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId         String    @unique
  user          User      @relation(name: "UserCreatedGig", fields: [UserId], references: [id])
  Skizzer       User      @relation(name: "UserAccptedGig", fields: [skizzerId], references: [id])
  skizzerId     String
  UserId        String
  status        GigStatus @default(PENDING)
  budget        Int
  finalDateTime DateTime
  meeting       meeting?

  //@@unique([skizzerId, UserId]) This means they can never build realtion in future
  @@unique([gigId, skizzerId]) //There will be Unique relation B/w gigid and Skizer
}

model meeting {
  id        String        @id @default(uuid())
  gigUserId String        @unique
  status    MeetingStatus @default(UNBOOKED_PENDING) //This is the Status of the Meeting, If it is Pending or Ended
  GigUser   GigUser       @relation(fields: [gigUserId], references: [id])

  @@index([gigUserId])
}

enum MeetingStatus {
  UNBOOKED_PENDING
  BOOKED_PENDING
  ONGOING //When the meeting Time is Ongoing Then Before 30 Minutes we will send the Notification
  ENDED
}

enum AuthType {
  GOOGLE
  FACEBOOK
  GITHUB
  PENDING
  LINKEDIN
}

enum GigStatus {
  PENDING
  ACCEPTED
  REJECTED
  IGNORED
  CONFIRMED
}

enum UserRole {
  USER
  SKIZZER
}
