// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  name              String?
  password          String
  userImage         String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  gigsCreated       Gigs[]    @relation(name: "Author")
  gigsAccepted      Gigs[]    @relation(name: "AcceptedUsers") //This will specify one and one reealtion
  authType          AuthType?
  languages         String[]
  reviewsGiven      Reviews[] @relation(name: "GiventoUser")
  reviewsReceived   Reviews[] @relation(name: "GivenbyUser")
  role              UserRole  @default(USER)
}

model Gigs {
  id              String    @id @default(uuid())
  title           String
  content         String
  startDateTime   DateTime
  endDateTime     DateTime
  createdAt       DateTime  @default(now()) //When the Post is Created
  updatedAt       DateTime  @updatedAt
  authorId        String
  acceptedById    String?
  Interval        Json //This will store the interval of the Gig
  status          GigStatus
  acceptedBy      User?     @relation(name: "AcceptedUsers", fields: [acceptedById], references: [id])
  author          User      @relation(name: "Author", fields: [authorId], references: [id])
}

model Reviews {
  id              String   @id @default(uuid())
  content         String
  rating          Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  givento         String
  givenby         String
  giventoUser     User     @relation(name: "GiventoUser", fields: [givento], references: [id])
  givenbyUser     User     @relation(name: "GivenbyUser", fields: [givenby], references: [id])
}

enum AuthType {
  GOOGLE
  FACEBOOK
  GITHUB
  PENDING //if the User is not verified 
}

enum GigStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum UserRole {
  USER
  SKIZZER
}
