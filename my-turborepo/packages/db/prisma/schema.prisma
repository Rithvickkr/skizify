generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  username        String?   @unique
  email           String    @unique
  name            String?
  password        String
  userImage       String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  gigsCreated     Gigs[]    @relation(name: "Author")
  gigUsertable    GigUser[] @relation(name: "UserCreatedGig")
  gigSkizzerTable GigUser[] @relation(name: "UserAccptedGig")
  authType        AuthType?
  languages       String[]
  reviewsGiven    Reviews[] @relation(name: "GiventoUser")
  reviewsReceived Reviews[] @relation(name: "GivenbyUser")
  role            UserRole  @default(USER)
  confirmedGigs   Gigs[]    @relation(name: "ConfirmedUser")
  bio             String?
  education       String?
}

model Gigs {
  id            String    @id @default(uuid())
  title         String
  content       String
  startDateTime DateTime
  endDateTime   DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  timeneeded    Int
  authorId      String
  confirmUserId String?
  confirmedUser User?     @relation(name: "ConfirmedUser", fields: [confirmUserId], references: [id])
  status        GigStatus @default(PENDING)
  author        User      @relation(name: "Author", fields: [authorId], references: [id])
  acceptedUsers GigUser[] 
  Interval      Json
}

model Reviews {
  id          String   @id @default(uuid())
  content     String
  rating      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  givento     String
  givenby     String
  giventoUser User     @relation(name: "GiventoUser", fields: [givento], references: [id])
  givenbyUser User     @relation(name: "GivenbyUser", fields: [givenby], references: [id])
}

model GigUser {
  id        String    @id @default(uuid())
  gig       Gigs      @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId     String
  user      User      @relation(name: "UserCreatedGig", fields: [UserId], references: [id])
  Skizzer   User      @relation(name: "UserAccptedGig", fields: [skizzerId], references: [id])
  skizzerId String
  UserId    String
  status    GigStatus @default(PENDING)

  @@unique([skizzerId, UserId])
}

enum AuthType {
  GOOGLE
  FACEBOOK
  GITHUB
  PENDING
}

enum GigStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum UserRole {
  USER
  SKIZZER
}
